# 1. Importar as bibliotecas necess√°rias

import sys
import os
import requests
import time
from openai import OpenAI
from requests.auth import HTTPBasicAuth
import gspread
from google.oauth2.service_account import Credentials

# Importa√ß√£o condicional de configura√ß√£o (local ou cloud)
try:
    import streamlit as st
    if hasattr(st, "secrets") and "WP_URL" in st.secrets:
        from config_cloud import *
    else:
        from config import *
except ImportError:
    from config import *

# Importar configura√ß√µes de execu√ß√£o
try:
    from config_execucao import get_configuracoes_execucao
    config_execucao = get_configuracoes_execucao()
    print(f"[INFO] Configura√ß√µes de execu√ß√£o: {config_execucao}")
except ImportError:
    print("[AVISO] Arquivo config_execucao.py n√£o encontrado, usando configura√ß√µes padr√£o")
    config_execucao = {
        'categoria_wp': 'Others',
        'status_publicacao': 'draft',
        'quantidade_textos': 3
    }

from prompt_manager import get_prompt_titulo, get_prompt_artigo, get_system_prompts

# Validar configura√ß√µes ao iniciar

# Inicializar cliente OpenAI com configura√ß√µes atualizadas
client = OpenAI(
    api_key=OPENAI_API_KEY,
    timeout=30.0,  # Timeout de 30 segundos
    max_retries=3   # M√°ximo 3 tentativas
)

print("\n--- CARREGANDO T√ìPICOS DO GOOGLE SHEETS ---")

# === CARREGAR T√ìPICOS DO GOOGLE SHEETS ===
def carregar_topicos_sheets():
    try:
        print("Configurando credenciais...")
        # Configurar credenciais do Google Sheets
        scope = [
            'https://www.googleapis.com/auth/spreadsheets.readonly',
            'https://www.googleapis.com/auth/drive.readonly'
        ]
        
        # Verificar se o arquivo de credenciais existe
        if not os.path.exists(CREDENTIALS_FILE):
            raise FileNotFoundError(f"Arquivo de credenciais n√£o encontrado: {CREDENTIALS_FILE}")
        
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=scope)
        gc = gspread.authorize(creds)
        
        print("Abrindo planilha...")
        # Abrir a planilha
        sheet = gc.open_by_key(GOOGLE_SHEET_ID).sheet1
        
        print("Lendo t√≥picos das c√©lulas A2 at√© A4...")
        # Ler valores das c√©lulas A2 at√© A4
        topicos = []
        for row in range(2, 5):  # Linhas 2, 3, 4
            try:
                cell_value = sheet.cell(row, 1).value  # Coluna A
                if cell_value and cell_value.strip():
                    topicos.append(cell_value.strip())
                    print(f"  T√≥pico encontrado na linha {row}: {cell_value.strip()}")
            except Exception as e:
                print(f"[AVISO] Erro ao ler linha {row}: {e}")
                continue
        
        return topicos
        
    except Exception as e:
        print(f"[ERRO] N√£o foi poss√≠vel carregar t√≥picos do Google Sheets: {e}")
        print(f"Detalhes do erro: {type(e).__name__}")
        return []

topicos = carregar_topicos_sheets()

# Usar t√≥picos da configura√ß√£o ao inv√©s da planilha
topicos_config = config_execucao.get('topicos_lista', [])
if topicos_config:
    topicos = topicos_config
    print(f"[INFO] Usando {len(topicos)} t√≥picos da configura√ß√£o da interface")

quantidade_maxima = config_execucao.get('quantidade_textos', 3)
print(f"[INFO] Quantidade de textos por t√≥pico (config): {quantidade_maxima}")
# N√£o limitar a lista de t√≥picos aqui! A lista j√° vem expandida do frontend.

print("T√≥picos que ser√£o processados:")
for i, t in enumerate(topicos, 1):
    print(f" {i}. {t}")

print("\n[INFO] *** T√ìPICOS AGORA V√äM DA INTERFACE WEB - Google Sheets n√£o √© mais necess√°rio ***")

# === GERAR T√çTULOS E ARTIGOS BASEADOS NOS T√ìPICOS DA INTERFACE ===
for idx, topico_geral in enumerate(topicos, 1):
    print(f"\n--- PROCESSANDO T√ìPICO {idx}/{len(topicos)}: {topico_geral} ---")
    print(f"[LOG] Iniciando gera√ß√£o de t√≠tulo para o t√≥pico: {topico_geral}")
    try:
        # === GERAR T√çTULO ESPEC√çFICO BASEADO NO T√ìPICO GERAL ===
        print("[INFO] Carregando prompt personalizado para t√≠tulo...")
        prompt_titulo = get_prompt_titulo(topico_geral)
        system_prompts = get_system_prompts()

        response_titulo = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompts['titulo']},
                {"role": "user", "content": prompt_titulo}
            ],
            temperature=0.8,  # Mais criatividade para t√≠tulos cativantes
            max_tokens=120
        )

        titulo_especifico = response_titulo.choices[0].message.content.strip().strip('"')
        print(f"[LOG] T√≠tulo gerado para '{topico_geral}': {titulo_especifico}")
        print(f"[EXEMPLO] T√≠tulo retornado: {titulo_especifico}")

        # === GERAR ARTIGO BASEADO EM PESQUISA ===
        print(f"[LOG] Iniciando gera√ß√£o do artigo para o t√≠tulo: {titulo_especifico}")
        print("[INFO] Carregando prompt personalizado para artigo...")
        prompt_artigo = get_prompt_artigo(titulo_especifico, topico_geral)

        response_artigo = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompts['artigo']},
                {"role": "user", "content": prompt_artigo}
            ],
            temperature=0.7,
            max_tokens=3000
        )

        conteudo = response_artigo.choices[0].message.content.strip()
        print(f"[LOG] Artigo gerado para '{titulo_especifico}' (t√≥pico: {topico_geral})")
        print(f"[EXEMPLO] In√≠cio do artigo: {conteudo[:200]} ...\n---fim do preview---\n")

        # === PUBLICAR POST ===
        print(f"[LOG] Publicando post '{titulo_especifico}' no WordPress...")
        # ... c√≥digo de publica√ß√£o ...
        # Exemplo de resultado:
        # print(f"[RESULTADO] Post publicado com sucesso! URL: https://seusite.com/{slug}")

    except Exception as e:
        print(f"[ERRO] Falha ao processar t√≥pico '{topico_geral}': {e}")

    time.sleep(10)  # Evita bloqueios na API do WordPress

print("\n--- FINALIZADO COM SUCESSO ---")
print("[INFO] üéØ Para editar os prompts, use a interface web: streamlit run app.py")
