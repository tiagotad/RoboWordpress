#!/usr/bin/env python3
"""
Diagn√≥stico completo da API WordPress
"""

import requests
from requests.auth import HTTPBasicAuth
import json

def diagnostico_wordpress():
    print("üîç DIAGN√ìSTICO COMPLETO DA API WORDPRESS")
    print("=" * 50)
    
    # Configura√ß√µes do WordPress - pegar do config_execucao.py
    try:
        from config_execucao import get_configuracoes_execucao
        config = get_configuracoes_execucao()
        wp_url = config['wp_url']
        wp_user = config['wp_user']
        wp_password = config['wp_password']
        print(f"[CONFIG] Usando configura√ß√µes do config_execucao.py")
        print(f"[CONFIG] WordPress URL: {wp_url}")
        print(f"[CONFIG] WordPress User: {wp_user}")
    except Exception as e:
        print(f"[ERRO] N√£o foi poss√≠vel carregar configura√ß√µes: {e}")
        print("[AVISO] Usando configura√ß√µes padr√£o de exemplo")
        wp_url = "https://thenextavenue.com"
        wp_user = "admin"
        wp_password = "senha_exemplo"
        
        if not all([wp_url, wp_user, wp_password]):
            print("‚ùå ERRO: Credenciais incompletas!")
            return False
        
        # TESTE 1: Conectividade b√°sica
        print("üåê TESTE 1: Conectividade com o site")
        try:
            response = requests.get(wp_url, timeout=10)
            print(f"‚úÖ Site acess√≠vel - Status: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Site inacess√≠vel: {e}")
            return False
        
        # TESTE 2: API REST dispon√≠vel
        print("\nüîå TESTE 2: API WordPress REST dispon√≠vel")
        try:
            api_response = requests.get(f"{wp_url}/wp-json/wp/v2/", timeout=10)
            if api_response.status_code == 200:
                print("‚úÖ API REST WordPress est√° ativa")
            else:
                print(f"‚ùå API REST n√£o dispon√≠vel - Status: {api_response.status_code}")
                print(f"üìÑ Resposta: {api_response.text[:200]}")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao acessar API REST: {e}")
            return False
        
        # TESTE 3: Autentica√ß√£o
        print("\nüîê TESTE 3: Valida√ß√£o de autentica√ß√£o")
        try:
            auth_response = requests.get(
                f'{wp_url}/wp-json/wp/v2/users/me',
                auth=HTTPBasicAuth(wp_user, wp_password),
                timeout=10
            )
            
            if auth_response.status_code == 200:
                user_data = auth_response.json()
                print(f"‚úÖ Autentica√ß√£o v√°lida!")
                print(f"   Nome: {user_data.get('name', 'N/A')}")
                print(f"   ID: {user_data.get('id', 'N/A')}")
                print(f"   Roles: {user_data.get('roles', [])}")
            else:
                print(f"‚ùå Falha na autentica√ß√£o - Status: {auth_response.status_code}")
                print(f"üìÑ Resposta: {auth_response.text[:300]}")
                return False
        except Exception as e:
            print(f"‚ùå Erro na autentica√ß√£o: {e}")
            return False
        
        # TESTE 4: Verificar categoria
        print(f"\nüìÇ TESTE 4: Valida√ß√£o da categoria ID {categoria_id}")
        try:
            cat_response = requests.get(
                f"{wp_url}/wp-json/wp/v2/categories/{categoria_id}",
                auth=HTTPBasicAuth(wp_user, wp_password),
                timeout=10
            )
            
            if cat_response.status_code == 200:
                cat_data = cat_response.json()
                print(f"‚úÖ Categoria v√°lida: {cat_data.get('name')} (ID: {cat_data.get('id')})")
            else:
                print(f"‚ö†Ô∏è Categoria ID {categoria_id} pode n√£o existir - Status: {cat_response.status_code}")
                print("   Usando categoria padr√£o (1) para teste...")
                categoria_id = 1
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar categoria: {e}")
            categoria_id = 1
        
        # TESTE 5: Criar post de teste
        print(f"\nüìù TESTE 5: Cria√ß√£o de post de teste")
        
        post_data = {
            'title': 'TESTE DIAGN√ìSTICO - Apagar ap√≥s teste',
            'content': '<p>Este √© um post de teste criado pelo diagn√≥stico autom√°tico. Pode ser apagado.</p>',
            'status': 'draft',  # Sempre draft para teste
            'categories': [categoria_id],
            'author': 1
        }
        
        print("üì§ Enviando requisi√ß√£o...")
        print(f"   URL: {wp_url}/wp-json/wp/v2/posts")
        print(f"   Dados: {json.dumps(post_data, indent=2)}")
        
        try:
            headers = {'Content-Type': 'application/json'}
            post_response = requests.post(
                f'{wp_url}/wp-json/wp/v2/posts',
                json=post_data,
                auth=HTTPBasicAuth(wp_user, wp_password),
                headers=headers,
                timeout=30
            )
            
            print(f"\nüìä RESPOSTA DA API:")
            print(f"   Status Code: {post_response.status_code}")
            print(f"   Headers: {dict(post_response.headers)}")
            
            if post_response.status_code in [200, 201]:
                result = post_response.json()
                post_id = result.get('id')
                print(f"\n‚úÖ POST CRIADO COM SUCESSO!")
                print(f"   ID: {post_id}")
                print(f"   T√≠tulo: {result.get('title', {}).get('rendered', 'N/A')}")
                print(f"   Status: {result.get('status')}")
                print(f"   URL: {result.get('link', 'N/A')}")
                return True
            else:
                print(f"\n‚ùå FALHA AO CRIAR POST:")
                print(f"   C√≥digo: {post_response.status_code}")
                print(f"   Reason: {post_response.reason}")
                
                try:
                    error_data = post_response.json()
                    print(f"   Erro JSON:")
                    for key, value in error_data.items():
                        print(f"     {key}: {value}")
                except:
                    print(f"   Resposta texto: {post_response.text[:500]}")
                
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return False
            
    except Exception as e:
        print(f"üí• Erro geral no diagn√≥stico: {e}")
        return False

if __name__ == "__main__":
    print()
    sucesso = diagnostico_wordpress()
    print()
    if sucesso:
        print("üéâ DIAGN√ìSTICO: API WordPress est√° funcionando corretamente!")
        print("   O problema pode estar no c√≥digo do rob√¥ ou na chave OpenAI.")
    else:
        print("‚ùå DIAGN√ìSTICO: Problema identificado na API WordPress.")
        print("   Corrija os problemas acima antes de usar o rob√¥.")
    print()
