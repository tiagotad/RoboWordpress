# ROB√î PILLOTO V4 - COM GERA√á√ÉO DE IMAGENS DALL¬∑E 3
# Vers√£o avan√ßada que gera imagens para cada post e define como imagem em destaque

import sys
import os
import requests
import time
import base64
from io import BytesIO
from datetime import datetime
from openai import OpenAI
from requests.auth import HTTPBasicAuth
import gspread
from google.oauth2.service_account import Credentials
from PIL import Image
import json

# Importa√ß√£o condicional de configura√ß√£o (local ou cloud)
try:
    import streamlit as st
    if hasattr(st, "secrets") and "WP_URL" in st.secrets:
        from config_cloud import *
    else:
        from config import *
except ImportError:
    from config import *

# Importar configura√ß√µes de execu√ß√£o
try:
    from config_execucao import get_configuracoes_execucao
    config_execucao = get_configuracoes_execucao()
    print(f"[INFO] Configura√ß√µes de execu√ß√£o: {config_execucao}")
except ImportError:
    print("[AVISO] Arquivo config_execucao.py n√£o encontrado, usando configura√ß√µes padr√£o")
    config_execucao = {
        'categoria_wp': 'Others',
        'status_publicacao': 'draft',
        'quantidade_textos': 3
    }

from prompt_manager import get_prompt_titulo, get_prompt_artigo, get_system_prompts

# Inicializar cliente OpenAI com configura√ß√µes atualizadas
client = OpenAI(
    api_key=OPENAI_API_KEY,
    timeout=120.0,  # Timeout maior para gera√ß√£o de imagens e artigos
    max_retries=2   # M√°ximo 2 tentativas autom√°ticas
)

print("\n--- ROB√î PILLOTO V4 - COM GERA√á√ÉO DE IMAGENS DALL¬∑E 3 ---")
print("[INFO] ‚ú® Esta vers√£o gera imagens automaticamente para cada post!")

def log_with_timestamp(message):
    """Adiciona timestamp aos logs"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {message}")

def gerar_prompt_imagem(titulo, conteudo_resumo):
    """Gera um prompt otimizado para DALL¬∑E 3 baseado no t√≠tulo e conte√∫do do artigo"""
    
    # Criar um resumo do conte√∫do para o prompt da imagem
    palavras_chave = titulo.lower()
    
    # Prompt base para diferentes temas
    if any(palavra in palavras_chave for palavra in ['filme', 'cinema', 'ator', 'atriz', 'diretor']):
        prompt_base = f"Create a cinematic, movie-themed illustration representing: {titulo}. Style: modern, vibrant, professional movie poster aesthetic"
    elif any(palavra in palavras_chave for palavra in ['s√©rie', 'tv', 'netflix', 'streaming']):
        prompt_base = f"Create a modern TV series poster illustration for: {titulo}. Style: Netflix-style promotional artwork, dark and dramatic"
    elif any(palavra in palavras_chave for palavra in ['viagem', 'turismo', 'destino', 'lugar']):
        prompt_base = f"Create a beautiful travel destination illustration for: {titulo}. Style: vibrant, inspiring travel photography aesthetic"
    elif any(palavra in palavras_chave for palavra in ['tecnologia', 'tech', 'ai', 'intelig√™ncia']):
        prompt_base = f"Create a futuristic technology illustration for: {titulo}. Style: modern tech, blue and purple gradients, clean design"
    elif any(palavra in palavras_chave for palavra in ['sa√∫de', 'exerc√≠cio', 'fitness', 'bem-estar']):
        prompt_base = f"Create a health and wellness illustration for: {titulo}. Style: clean, inspiring, modern healthcare aesthetic"
    elif any(palavra in palavras_chave for palavra in ['livro', 'literatura', 'autor', 'leitura']):
        prompt_base = f"Create a literary-themed illustration for: {titulo}. Style: elegant, bookish, warm and inviting"
    else:
        # Prompt gen√©rico para outros temas
        prompt_base = f"Create a professional, engaging illustration for the blog post: {titulo}. Style: modern, clean, visually appealing"
    
    # Adicionar especifica√ß√µes t√©cnicas
    prompt_final = f"""{prompt_base}. 
    Requirements: 
    - High quality, professional artwork
    - Suitable for blog featured image
    - No text or watermarks
    - 16:9 aspect ratio preferred
    - Bright, engaging colors
    - Modern and clean aesthetic"""
    
    return prompt_final

def gerar_imagem_dalle(prompt_imagem, titulo):
    """Gera uma imagem usando DALL¬∑E 3"""
    print(f"[INFO] üé® Gerando imagem para: {titulo}")
    print(f"[INFO] Prompt da imagem: {prompt_imagem[:100]}...")
    
    try:
        response = client.images.generate(
            model="dall-e-3",
            prompt=prompt_imagem,
            size="1792x1024",  # Formato wide para featured image
            quality="standard",
            n=1
        )
        
        image_url = response.data[0].url
        print(f"[‚úî] Imagem gerada com sucesso: {image_url}")
        return image_url
        
    except Exception as e:
        print(f"[ERRO] Falha ao gerar imagem: {e}")
        return None

def baixar_imagem(image_url, nome_arquivo):
    """Baixa a imagem gerada pelo DALL¬∑E 3"""
    try:
        response = requests.get(image_url, timeout=30)
        response.raise_for_status()
        
        # Salvar imagem temporariamente
        with open(nome_arquivo, 'wb') as f:
            f.write(response.content)
        
        print(f"[‚úî] Imagem salva como: {nome_arquivo}")
        return True
        
    except Exception as e:
        print(f"[ERRO] Falha ao baixar imagem: {e}")
        return False

def upload_imagem_wordpress(caminho_imagem, titulo, alt_text):
    """Faz upload da imagem para o WordPress e retorna o ID da m√≠dia"""
    try:
        print(f"[INFO] üì§ Fazendo upload da imagem para WordPress...")
        
        # Endpoint para upload de m√≠dia
        media_endpoint = f"{WP_URL}/wp-json/wp/v2/media"
        
        # Preparar arquivo para upload
        with open(caminho_imagem, 'rb') as img_file:
            files = {
                'file': (f"{titulo}.jpg", img_file, 'image/jpeg')
            }
            
            headers = {
                'Content-Disposition': f'attachment; filename="{titulo}.jpg"'
            }
            
            data = {
                'title': titulo,
                'alt_text': alt_text,
                'caption': f'Imagem gerada para: {titulo}'
            }
            
            response = requests.post(
                media_endpoint,
                files=files,
                data=data,
                headers=headers,
                auth=HTTPBasicAuth(WP_USER, WP_PASSWORD),
                timeout=60
            )
            
            response.raise_for_status()
            media_data = response.json()
            media_id = media_data['id']
            
            print(f"[‚úî] Imagem enviada com sucesso! ID: {media_id}")
            return media_id
            
    except Exception as e:
        print(f"[ERRO] Falha no upload da imagem: {e}")
        return None

def definir_imagem_destaque(post_id, media_id):
    """Define a imagem como featured image do post"""
    try:
        print(f"[INFO] üñºÔ∏è Definindo imagem {media_id} como destaque do post {post_id}...")
        
        # Endpoint para atualizar post
        post_endpoint = f"{WP_URL}/wp-json/wp/v2/posts/{post_id}"
        
        data = {
            'featured_media': media_id
        }
        
        response = requests.post(
            post_endpoint,
            json=data,
            auth=HTTPBasicAuth(WP_USER, WP_PASSWORD),
            timeout=30
        )
        
        response.raise_for_status()
        print(f"[‚úî] Imagem definida como destaque com sucesso!")
        return True
        
    except Exception as e:
        print(f"[ERRO] Falha ao definir imagem como destaque: {e}")
        return False

# === CARREGAR T√ìPICOS ===
print("\n--- CARREGANDO T√ìPICOS ---")

def carregar_topicos_sheets():
    try:
        print("Configurando credenciais...")
        scope = [
            'https://www.googleapis.com/auth/spreadsheets.readonly',
            'https://www.googleapis.com/auth/drive.readonly'
        ]
        
        if not os.path.exists(CREDENTIALS_FILE):
            raise FileNotFoundError(f"Arquivo de credenciais n√£o encontrado: {CREDENTIALS_FILE}")
        
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=scope)
        gc = gspread.authorize(creds)
        
        print("Abrindo planilha...")
        sheet = gc.open_by_key(GOOGLE_SHEET_ID).sheet1
        
        print("Lendo t√≥picos das c√©lulas A2 at√© A4...")
        topicos = []
        for row in range(2, 5):
            try:
                cell_value = sheet.cell(row, 1).value
                if cell_value and cell_value.strip():
                    topicos.append(cell_value.strip())
                    print(f"  T√≥pico encontrado na linha {row}: {cell_value.strip()}")
            except Exception as e:
                print(f"[AVISO] Erro ao ler linha {row}: {e}")
                continue
        
        return topicos
        
    except Exception as e:
        print(f"[ERRO] N√£o foi poss√≠vel carregar t√≥picos do Google Sheets: {e}")
        return []

topicos = carregar_topicos_sheets()

# Usar t√≥picos da configura√ß√£o ao inv√©s da planilha
topicos_config = config_execucao.get('topicos_lista', [])
if topicos_config:
    topicos = topicos_config
    print(f"[INFO] Usando {len(topicos)} t√≥picos da configura√ß√£o da interface")

quantidade_maxima = config_execucao.get('quantidade_textos', 3)
print(f"[INFO] Quantidade de textos por t√≥pico (config): {quantidade_maxima}")
# N√£o limitar a lista de t√≥picos aqui! A lista j√° vem expandida do frontend.

print("T√≥picos que ser√£o processados:")
for i, t in enumerate(topicos, 1):
    print(f" {i}. {t}")

print("\n[INFO] *** VERS√ÉO V4 - AGORA COM GERA√á√ÉO DE IMAGENS AUTOM√ÅTICA! ***")

# === GERAR CONTE√öDO + IMAGENS ===
for idx, topico_geral in enumerate(topicos, 1):
    log_with_timestamp(f"--- PROCESSANDO T√ìPICO {idx}/{len(topicos)}: {topico_geral} ---")
    log_with_timestamp(f"[LOG] Iniciando gera√ß√£o de t√≠tulo para o t√≥pico: {topico_geral}")
    try:
        # === GERAR T√çTULO ESPEC√çFICO ===
        log_with_timestamp("[INFO] üìù Carregando prompt personalizado para t√≠tulo...")
        prompt_titulo = get_prompt_titulo(topico_geral)
        system_prompts = get_system_prompts()

        response_titulo = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompts['titulo']},
                {"role": "user", "content": prompt_titulo}
            ],
            temperature=0.8,
            max_tokens=120
        )

        titulo_especifico = response_titulo.choices[0].message.content.strip().strip('"')
        log_with_timestamp(f"[LOG] T√≠tulo gerado para '{topico_geral}': {titulo_especifico}")
        log_with_timestamp(f"[EXEMPLO] T√≠tulo retornado: {titulo_especifico}")

        # === GERAR ARTIGO ===
        log_with_timestamp(f"[LOG] Iniciando gera√ß√£o do artigo para o t√≠tulo: {titulo_especifico}")
        log_with_timestamp("[INFO] üìÑ Carregando prompt personalizado para artigo...")
        prompt_artigo = get_prompt_artigo(titulo_especifico, topico_geral)

        response_artigo = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompts['artigo']},
                {"role": "user", "content": prompt_artigo}
            ],
            temperature=0.7,
            max_tokens=3000
        )

        conteudo = response_artigo.choices[0].message.content.strip()
        log_with_timestamp(f"[LOG] Artigo gerado para '{titulo_especifico}' (t√≥pico: {topico_geral})")
        log_with_timestamp(f"[EXEMPLO] In√≠cio do artigo: {conteudo[:200]}...")

        # === GERAR IMAGEM COM DALL¬∑E 3 ===
        log_with_timestamp("[LOG] üé® Gerando imagem com DALL¬∑E 3...")
        
        # Criar prompt para imagem baseado no t√≠tulo e conte√∫do
        prompt_imagem = gerar_prompt_imagem(titulo_especifico, conteudo[:500])
        
        # Gerar imagem
        image_url = gerar_imagem_dalle(prompt_imagem, titulo_especifico)
        
        media_id = None
        nome_arquivo_img = None
        
        if image_url:
            # Baixar imagem
            nome_arquivo_img = f"imagem_{titulo_especifico[:30].replace(' ', '_').replace('/', '_')}.jpg"
            nome_arquivo_img = "".join(c for c in nome_arquivo_img if c.isalnum() or c in "._-")
            
            if baixar_imagem(image_url, nome_arquivo_img):
                # Upload para WordPress
                alt_text = f"Imagem representando: {titulo_especifico}"
                media_id = upload_imagem_wordpress(nome_arquivo_img, titulo_especifico, alt_text)
        
        # === BUSCAR/CRIAR CATEGORIA ===
        categoria_desejada = config_execucao.get('categoria_wp', 'Others')
        try:
            categories_endpoint = f"{WP_URL}/wp-json/wp/v2/categories"
            categories_response = requests.get(categories_endpoint, auth=HTTPBasicAuth(WP_USER, WP_PASSWORD), timeout=10)
            categories_response.raise_for_status()
            
            categories = categories_response.json()
            category_id = None
            
            for category in categories:
                if category['name'].lower() == categoria_desejada.lower():
                    category_id = category['id']
                    break
            
            if category_id is None:
                create_category_data = {
                    'name': categoria_desejada,
                    'slug': categoria_desejada.lower().replace(' ', '-')
                }
                create_response = requests.post(categories_endpoint, json=create_category_data, auth=HTTPBasicAuth(WP_USER, WP_PASSWORD), timeout=10)
                create_response.raise_for_status()
                category_id = create_response.json()['id']
                print(f"[INFO] Categoria '{categoria_desejada}' criada com ID: {category_id}")
            else:
                print(f"[INFO] Usando categoria existente '{categoria_desejada}' com ID: {category_id}")
            
        except Exception as e:
            print(f"[AVISO] Erro ao buscar/criar categoria '{categoria_desejada}': {e}")
            category_id = 1

        # === PUBLICAR NO WORDPRESS ===

        # === PUBLICAR NO WORDPRESS COM AUTOR ===
        status_publicacao = config_execucao.get('status_publicacao', 'draft')
        author_id = config_execucao.get('author_id', 1)
        post_data = {
            'title': titulo_especifico,
            'content': conteudo,
            'status': status_publicacao,
            'categories': [category_id],
            'author': author_id
        }
        # Adicionar imagem em destaque se foi gerada
        if media_id:
            post_data['featured_media'] = media_id

        endpoint = f"{WP_URL}/wp-json/wp/v2/posts"
        response_wp = requests.post(endpoint, json=post_data, auth=HTTPBasicAuth(WP_USER, WP_PASSWORD), timeout=20)
        response_wp.raise_for_status()
        
        post_data_response = response_wp.json()
        post_id = post_data_response['id']

        status_msg = "publicado" if status_publicacao == "publish" else "salvo como rascunho"
        log_with_timestamp(f"[‚úî] Post {status_msg} com sucesso na categoria '{categoria_desejada}' (autor ID {author_id}): {titulo_especifico}")
        log_with_timestamp(f"[RESULTADO] Post publicado com sucesso! ID: {post_id}")
        log_with_timestamp(f"[INFO] URL do post: {WP_URL}/?p={post_id}")
        
        if media_id:
            log_with_timestamp(f"[‚úî] üñºÔ∏è Imagem em destaque definida com sucesso!")
        else:
            log_with_timestamp(f"[‚ö†Ô∏è] Post criado sem imagem em destaque (erro na gera√ß√£o)")
        
        log_with_timestamp(f"[INFO] Usando prompts personalizados + DALL¬∑E 3")
        
        # Limpar arquivo tempor√°rio
        if nome_arquivo_img and os.path.exists(nome_arquivo_img):
            try:
                os.remove(nome_arquivo_img)
                print(f"[INFO] Arquivo tempor√°rio removido: {nome_arquivo_img}")
            except:
                pass

    except Exception as e:
        log_with_timestamp(f"[ERRO] Falha ao processar t√≥pico '{topico_geral}': {e}")
        # ...existing code...

    print(f"[INFO] ‚è±Ô∏è Aguardando 15 segundos antes do pr√≥ximo post...")
    time.sleep(15)  # Tempo maior entre posts devido √† gera√ß√£o de imagens

print("\n--- FINALIZADO COM SUCESSO ---")
print("[INFO] üéØ Para editar os prompts, use a interface web: streamlit run app.py")
print("[INFO] ‚ú® Vers√£o V4 - Agora com imagens autom√°ticas geradas por DALL¬∑E 3!")
