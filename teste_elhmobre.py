#!/usr/bin/env python3
"""
Script para testar conex√£o com o novo site WordPress elhmobre.com
"""

import requests
from requests.auth import HTTPBasicAuth
from datetime import datetime
import json

def log_with_timestamp(message):
    """Adiciona timestamp aos logs"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {message}")

def testar_wordpress(wp_url, wp_user, wp_password):
    """Testa conex√£o com WordPress"""
    
    log_with_timestamp(f"üåê Testando conex√£o com: {wp_url}")
    log_with_timestamp(f"üë§ Usu√°rio: {wp_user}")
    
    try:
        # Teste 1: Verificar se a API REST est√° dispon√≠vel
        log_with_timestamp("1Ô∏è‚É£ Verificando se API REST est√° ativa...")
        
        api_endpoint = f"{wp_url}/wp-json/wp/v2"
        response = requests.get(api_endpoint, timeout=10)
        
        if response.status_code == 200:
            log_with_timestamp("‚úÖ API REST est√° funcionando!")
        else:
            log_with_timestamp(f"‚ö†Ô∏è API REST retornou c√≥digo: {response.status_code}")
            
        # Teste 2: Verificar autentica√ß√£o
        log_with_timestamp("2Ô∏è‚É£ Testando autentica√ß√£o...")
        
        auth_endpoint = f"{wp_url}/wp-json/wp/v2/users/me"
        response = requests.get(
            auth_endpoint,
            auth=HTTPBasicAuth(wp_user, wp_password),
            timeout=10
        )
        
        if response.status_code == 200:
            user_data = response.json()
            log_with_timestamp(f"‚úÖ Autentica√ß√£o OK! Usu√°rio: {user_data.get('name', 'N/A')}")
            log_with_timestamp(f"üìã ID: {user_data.get('id', 'N/A')}")
            log_with_timestamp(f"üìß Email: {user_data.get('email', 'N/A')}")
            log_with_timestamp(f"üîë Roles: {', '.join(user_data.get('roles', []))}")
            
        elif response.status_code == 401:
            log_with_timestamp("‚ùå Falha na autentica√ß√£o! Verifique usu√°rio e senha.")
            log_with_timestamp("üí° Dica: Use Application Password se tiver 2FA ativado")
            return False
            
        elif response.status_code == 403:
            log_with_timestamp("‚ùå Acesso negado! Usu√°rio n√£o tem permiss√µes suficientes.")
            return False
            
        else:
            log_with_timestamp(f"‚ö†Ô∏è Resposta inesperada: {response.status_code}")
            log_with_timestamp(f"Detalhes: {response.text[:200]}")
            
        # Teste 3: Verificar permiss√µes para criar posts
        log_with_timestamp("3Ô∏è‚É£ Verificando permiss√µes para criar posts...")
        
        posts_endpoint = f"{wp_url}/wp-json/wp/v2/posts"
        response = requests.options(
            posts_endpoint,
            auth=HTTPBasicAuth(wp_user, wp_password),
            timeout=10
        )
        
        if response.status_code in [200, 204]:
            allow_header = response.headers.get('Allow', '')
            if 'POST' in allow_header:
                log_with_timestamp("‚úÖ Permiss√£o para criar posts: OK!")
            else:
                log_with_timestamp("‚ö†Ô∏è Pode n√£o ter permiss√£o para criar posts")
        else:
            log_with_timestamp(f"‚ö†Ô∏è N√£o foi poss√≠vel verificar permiss√µes: {response.status_code}")
            
        # Teste 4: Listar categorias
        log_with_timestamp("4Ô∏è‚É£ Listando categorias dispon√≠veis...")
        
        categories_endpoint = f"{wp_url}/wp-json/wp/v2/categories"
        response = requests.get(
            categories_endpoint,
            auth=HTTPBasicAuth(wp_user, wp_password),
            timeout=10
        )
        
        if response.status_code == 200:
            categories = response.json()
            log_with_timestamp(f"‚úÖ {len(categories)} categorias encontradas:")
            for cat in categories[:5]:  # Mostrar apenas as primeiras 5
                log_with_timestamp(f"   üìÅ {cat['name']} (ID: {cat['id']})")
        else:
            log_with_timestamp(f"‚ö†Ô∏è N√£o foi poss√≠vel listar categorias: {response.status_code}")
            
        log_with_timestamp("üéâ Teste conclu√≠do!")
        return True
        
    except requests.exceptions.ConnectionError:
        log_with_timestamp("‚ùå Erro de conex√£o! Verifique se o site est√° online.")
        return False
    except requests.exceptions.Timeout:
        log_with_timestamp("‚ùå Timeout! O site demorou muito para responder.")
        return False
    except Exception as e:
        log_with_timestamp(f"‚ùå Erro inesperado: {e}")
        return False

if __name__ == "__main__":
    # Tentar carregar do arquivo .env primeiro
    try:
        from config import WP_URL, WP_USER, WP_PASSWORD
        log_with_timestamp(f"‚úÖ Credenciais carregadas do .env:")
        log_with_timestamp(f"   URL: {WP_URL}")
        log_with_timestamp(f"   Usu√°rio: {WP_USER}")
    except Exception as e:
        log_with_timestamp(f"‚ö†Ô∏è Erro ao carregar .env: {e}")
        # Configura√ß√µes para teste manual
        WP_URL = "https://elhombre.com.com.br"
        WP_USER = "eutiago"
        WP_PASSWORD = "Franz@Monet2017!@#"
    
    print("=" * 60)
    print("üß™ TESTE DE CONEX√ÉO WORDPRESS - ELHOMBRE.COM.BR")
    print("=" * 60)
    
    # Solicitar credenciais se n√£o estiverem definidas
    if not WP_PASSWORD or WP_PASSWORD == "COLOQUE_SUA_SENHA_AQUI":
        print("‚ö†Ô∏è CONFIGURE AS CREDENCIAIS PRIMEIRO!")
        print("Edite o arquivo .env e coloque suas credenciais reais")
        exit(1)
    
    # Executar teste
    sucesso = testar_wordpress(WP_URL, WP_USER, WP_PASSWORD)
    
    if sucesso:
        print("\n‚úÖ CONEX√ÉO OK! Voc√™ pode usar estas credenciais no RoboWordpress.")
    else:
        print("\n‚ùå CONEX√ÉO FALHOU! Verifique as credenciais e tente novamente.")
