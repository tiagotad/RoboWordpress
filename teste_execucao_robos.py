#!/usr/bin/env python3
"""
Teste de execu√ß√£o dos rob√¥s v3 e v4 para validar se funcionam corretamente
tanto via terminal quanto via interface
"""

import subprocess
import sys
import time
import threading
import os

def testar_importacao_robo(nome_arquivo):
    """Testa se o rob√¥ pode ser importado sem erros"""
    print(f"\n{'='*50}")
    print(f"üß™ TESTANDO IMPORTA√á√ÉO: {nome_arquivo}")
    print('='*50)
    
    try:
        # Tenta importar o m√≥dulo
        import importlib.util
        spec = importlib.util.spec_from_file_location("robo", nome_arquivo)
        robo_module = importlib.util.module_from_spec(spec)
        
        # Executa apenas as importa√ß√µes (n√£o executa o c√≥digo principal)
        print("üì¶ Testando importa√ß√µes...")
        spec.loader.exec_module(robo_module)
        print("‚úÖ Importa√ß√µes OK!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        return False

def testar_configuracoes():
    """Testa se as configura√ß√µes est√£o funcionando"""
    print(f"\n{'='*50}")
    print("üîß TESTANDO CONFIGURA√á√ïES")
    print('='*50)
    
    try:
        from config_execucao import get_configuracoes_execucao
        config = get_configuracoes_execucao()
        print(f"‚úÖ Configura√ß√µes carregadas: {config}")
        
        # Verifica se author_id est√° presente
        if 'author_id' in config:
            print(f"‚úÖ author_id encontrado: {config['author_id']}")
        else:
            print("‚ùå author_id n√£o encontrado nas configura√ß√µes!")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar configura√ß√µes: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ INICIANDO TESTES DE VALIDA√á√ÉO DOS ROB√îS")
    print("="*60)
    
    # Muda para o diret√≥rio correto
    os.chdir('/Users/tiago/Projetos/RoboWordpress')
    
    resultados = {}
    
    # Teste 1: Configura√ß√µes
    resultados['config'] = testar_configuracoes()
    
    # Teste 2: Importa√ß√£o dos rob√¥s
    robos = [
        'robo_pilloto_v3.py',
        'robo_pilloto_v4.py'
    ]
    
    for robo in robos:
        if os.path.exists(robo):
            resultados[robo] = testar_importacao_robo(robo)
        else:
            print(f"‚ùå Arquivo {robo} n√£o encontrado!")
            resultados[robo] = False
    
    # Relat√≥rio final
    print(f"\n{'='*60}")
    print("üìã RELAT√ìRIO FINAL DOS TESTES")
    print('='*60)
    
    for teste, resultado in resultados.items():
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        print(f"{teste}: {status}")
    
    todos_passaram = all(resultados.values())
    if todos_passaram:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Os rob√¥s est√£o prontos para execu√ß√£o via interface e terminal!")
    else:
        print("\n‚ö†Ô∏è  ALGUNS TESTES FALHARAM!")
        print("‚ùå Verifique os erros acima antes de prosseguir.")
    
    return todos_passaram

if __name__ == "__main__":
    sucesso = main()
    sys.exit(0 if sucesso else 1)
